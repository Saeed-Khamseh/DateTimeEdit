@using System.Globalization
@inject ILogger<DateEdit> Logger
@inject IJSRuntime Js

<div class="container @(Disabled == true ? "disabled" : "") @(Disabled == null ? "readonly" : "")">
    @if (EditMode != EditModes.TimeOnly)
    {
        <input @ref="_yearInput" type="number" class="year" min="1" max="9999" maxlength="4" value="@Year" @oninput="HandleYearInput"
               disabled="@(Disabled == true)" readonly="@(Disabled == null)"/>
        <span class="separator">@DateSeparator</span>
        <input @ref="_monthInput" type="number" min="1" max="12" maxlength="2" value="@(Month?.ToString("00"))" @oninput="HandleMonthInput"
               disabled="@(Disabled == true)" readonly="@(Disabled == null)"/>
        <span class="separator">@DateSeparator</span>
        <input @ref="_dayInput" type="number" min="1" max="31" maxlength="2" value="@(Day?.ToString("00"))" @oninput="HandleDayInput"
               disabled="@(Disabled == true)" readonly="@(Disabled == null)"/>
    }

    @if (EditMode != EditModes.DateOnly)
    {
        <input @ref="_hourInput" type="number" min="0" max="23" maxlength="2" class="hour" value="@(Hour?.ToString("00"))" @oninput="HandleHourInput"
               disabled="@(Disabled == true)" readonly="@(Disabled == null)"/>
        <span class="separator">:</span>
        <input @ref="_minuteInput" type="number" min="0" max="23" maxlength="2" value="@(Minute?.ToString("00"))" @oninput="HandleMinuteInput"
               disabled="@(Disabled == true)" readonly="@(Disabled == null)"/>
    }
</div>

@code {

    public enum EditModes
    {
        Datetime,
        DateOnly,
        TimeOnly
    }

    [Parameter] public bool? Disabled { get; set; } = false;
    [Parameter] public char DateSeparator { get; set; } = '/';
    [Parameter] public EditModes EditMode { get; set; } = EditModes.Datetime;
    [Parameter] public Calendar Calendar { get; set; } = new PersianCalendar();

    private DateTime? _value;
    private DateTime? _lastValidDate;

    [Parameter]
    public DateTime? Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            Logger.LogInformation($"Value changed: {_value?.ToString() ?? "null"}");
            UpdateDateParts();
            ValueChanged.InvokeAsync(value);
        }
    }

    [Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }

    private int? Day { get; set; }
    private int? Month { get; set; }
    private int? Year { get; set; }
    private int? Hour { get; set; }
    private int? Minute { get; set; }

    private ElementReference _yearInput;
    private ElementReference _monthInput;
    private ElementReference _dayInput;
    private ElementReference _hourInput;
    private ElementReference _minuteInput;


    private void UpdateDateParts()
    {
        if (_value.HasValue)
        {
            Day = Calendar.GetDayOfMonth(_value.Value);
            Month = Calendar.GetMonth(_value.Value);
            Year = Calendar.GetYear(_value.Value);
            Hour = _value.Value.Hour;
            Minute = _value.Value.Minute;
            _lastValidDate = _value;
        }
        else
        {
            Day = Month = Year = Hour = Minute = null;
        }
    }

    private void UpdateValue()
    {
        if (Year.HasValue && Month.HasValue && Day.HasValue && IsValidDate(Year.Value, Month.Value, Day.Value))
        {
            var updatedDate = Calendar.ToDateTime(
                Year.Value, Month.Value, Day.Value,
                Hour ?? _value?.Hour ?? 0, Minute ?? _value?.Minute ?? 0, 0, 0);

            _value = updatedDate;
            _lastValidDate = _value;
            Logger.LogInformation($"Updated Value: {_value}");
            ValueChanged.InvokeAsync(_value);
        }
        else
        {
            Logger.LogWarning("Incomplete date entry, waiting for valid input.");
        }
    }

    private bool IsValidDate(int? year, int? month, int? day)
    {
        if (!year.HasValue || !month.HasValue || !day.HasValue)
            return false;

        try
        {
            _ = Calendar.ToDateTime(year.Value, month.Value, day.Value, 0, 0, 0, 0);
            return true;
        }
        catch
        {
            Logger.LogError($"Invalid Date Attempted: Year={year}, Month={month}, Day={day}");
            return false;
        }
    }

    private async Task HandleYearInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var parsedYear))
        {
            Year = parsedYear;

            if (Year.ToString()?.Length == 4)
            {
                await _monthInput.FocusAsync(); // Move to month field when year has 4 digits
            }
        }
        else
        {
            Year = null;
        }

        UpdateValue();
    }

    private async Task HandleMonthInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var parsedMonth))
        {
            Month = parsedMonth;

            if (Month > 1 || Month.ToString()?.Length == 2)
            {
                CoerceDay();
                await _dayInput.FocusAsync();
            }
        }
        else
        {
            Month = null;
        }

        UpdateValue();
    }

    private async Task HandleDayInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var parsedDay))
        {
            Day = parsedDay;
            if (Year.HasValue && Month.HasValue)
            {
                var maxDays = Calendar.GetDaysInMonth(Year.Value, Month.Value);
                if (Day > maxDays)
                {
                    Day = maxDays;
                }
            }

            if (Day > 3 || Day.ToString()?.Length == 2)
            {
                await _hourInput.FocusAsync();
            }
        }
        else
        {
            Day = null;
        }

        UpdateValue();
    }

    private async Task HandleHourInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var parsedHour))
        {
            Hour = parsedHour;

            if (Hour > 2 || Hour.ToString()?.Length == 2)
            {
                await _minuteInput.FocusAsync();
            }
        }
        else
        {
            Hour = null;
        }

        UpdateValue();
    }

    private void HandleMinuteInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var parsedMinute))
        {
            Minute = parsedMinute;
        }
        else
        {
            Minute = null;
        }

        UpdateValue();
    }

    private void CoerceDay()
    {
        if (!Year.HasValue || !Month.HasValue || !Day.HasValue) return;
        var maxDays = Calendar.GetDaysInMonth(Year.Value, Month.Value);
        if (Day.Value > maxDays)
        {
            Day = maxDays;
        }
    }

}